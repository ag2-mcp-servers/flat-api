# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:15:29+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, EmailStr, Field, RootModel, SecretStr, confloat, constr


class Canvas(BaseModel):
    alternateLink: Optional[str] = Field(None, description='Link to Canvas assignment')
    id: Optional[str] = Field(
        None, description='Unique identifier of the course on Canvas assignment'
    )


class Lti(BaseModel):
    id: Optional[str] = Field(None, description='Resource ID in the LMS')


class Mfc(BaseModel):
    alternateLink: Optional[str] = Field(
        None, description='Link to MusicFirst Classroom task'
    )
    id: Optional[str] = Field(
        None, description='Unique identifier of the course on MusicFirst Task'
    )


class State(Enum):
    draft = 'draft'
    active = 'active'
    archived = 'archived'


class AssignmentCopy(BaseModel):
    assignment: Optional[str] = Field(
        None,
        description='An optional destination assignment where the original assignement will be copied. Must be a draft.',
    )
    classroom: Optional[str] = Field(
        None,
        description='The destination classroom where the assignment will be copied',
    )
    scheduledDate: Optional[datetime] = Field(
        None,
        description='The publication (scheduled) date of the assignment.\nIf this one is specified, the assignment will only be listed to the teachers of the class.\nAlternatively the existing `scheduledDate` from the copied assignment will be used.\n',
    )


class AssigneeMode(Enum):
    everyone = 'everyone'
    selected = 'selected'


class GoogleClassroom(BaseModel):
    topicId: Optional[str] = Field(
        None, description='Identifier of the topic where the assignment is created'
    )


class MicrosoftGraph(BaseModel):
    categories: Optional[List[str]] = Field(
        None, description='List of categories this assignment belongs to'
    )


class State1(Enum):
    draft = 'draft'
    active = 'active'


class AssignmentSubmissionComment(BaseModel):
    comment: Optional[str] = Field(None, description='The comment text')
    date: Optional[datetime] = Field(
        None, description='The date when the comment was posted'
    )
    id: Optional[str] = Field(None, description='The comment unique identifier')
    modificationDate: Optional[datetime] = Field(
        None, description='The date of the last comment modification'
    )
    submission: Optional[str] = Field(
        None, description='The submission unique identifier'
    )
    unread: Optional[bool] = Field(
        None, description='True if the comment is unread by the current user'
    )
    user: Optional[str] = Field(None, description='The author unique identifier')


class AssignmentSubmissionCommentCreation(BaseModel):
    comment: str = Field(..., description='The comment text')


class Attachment(BaseModel):
    revision: Optional[str] = Field(
        None, description='The revision identifier that changed'
    )
    score: Optional[str] = Field(None, description='The score identifier that changed')


class AssignmentSubmissionState(Enum):
    created = 'created'
    turnedIn = 'turnedIn'
    returned = 'returned'


class Comments(BaseModel):
    total: Optional[float] = Field(
        None, description='The total number of comments added to the submission'
    )
    unread: Optional[float] = Field(
        None, description='The number of unread comments for the current user'
    )


class AssignmentType(Enum):
    none = 'none'
    newScore = 'newScore'
    scoreTemplate = 'scoreTemplate'
    sharedWriting = 'sharedWriting'
    worksheet = 'worksheet'
    performance = 'performance'


class Type(Enum):
    flat = 'flat'
    link = 'link'
    googleDrive = 'googleDrive'
    worksheet = 'worksheet'


class ClassCreation(BaseModel):
    name: constr(max_length=255) = Field(..., description='The name of the new class')
    section: Optional[constr(max_length=255)] = Field(
        None, description='The section of the new class'
    )


class Canvas1(BaseModel):
    domain: Optional[str] = Field(
        None, description='Canvas instance domain (e.g. "canvas.instructure.com")'
    )
    id: Optional[str] = Field(
        None, description='Unique identifier of the course on Canvas'
    )


class Subject(Enum):
    english_language_arts = 'english/language arts'
    math = 'math'
    science = 'science'
    social_studies = 'social studies'
    language = 'language'
    homeroom_advisory = 'homeroom/advisory'
    interventions_online_learning = 'interventions/online learning'
    technology_and_engineering = 'technology and engineering'
    PE_and_health = 'PE and health'
    arts_and_music = 'arts and music'
    other = 'other'


class Clever(BaseModel):
    creationDate: Optional[datetime] = Field(
        None, description='The creation date of the section on clever'
    )
    id: Optional[str] = Field(None, description='Clever section unique identifier')
    modificationDate: Optional[datetime] = Field(
        None, description='The last modification date of the section on clever'
    )
    subject: Optional[Subject] = Field(
        None, description='Normalized subject of the course'
    )
    termEndDate: Optional[datetime] = Field(None, description='End date of the term')
    termName: Optional[str] = Field(
        None, description='Name of the term when this course happens'
    )
    termStartDate: Optional[datetime] = Field(
        None, description='Beginning date of the term'
    )


class GoogleClassroom1(BaseModel):
    alternateLink: Optional[str] = Field(
        None, description='Absolute link to this course in the Classroom web UI'
    )
    id: Optional[str] = Field(
        None, description='The course identifier on Google Classroom'
    )


class GoogleDrive(BaseModel):
    teacherFolderAlternateLink: Optional[str] = Field(
        None, description="[Teachers only] The Drive URL of the teachers' folder\n"
    )
    teacherFolderId: Optional[str] = Field(
        None,
        description="[Teachers only] The Drive directory identifier of the teachers' folder\n",
    )


class Reason(Enum):
    otherOrgnanization = 'otherOrgnanization'
    personalSubscription = 'personalSubscription'


class SyncItem(BaseModel):
    email: Optional[str] = Field(
        None, description='The email address of the user concerned by this sync issue'
    )
    id: Optional[str] = Field(None, description='The account user identifier')
    reason: Optional[Reason] = Field(
        None, description='The reason why the account cannot be synced'
    )


class Issues(BaseModel):
    sync: Optional[List[SyncItem]] = Field(
        None, description='Synchronization issues for the class'
    )


class Lti1(BaseModel):
    contextId: Optional[str] = Field(
        None, description='Unique context identifier provided'
    )
    contextLabel: Optional[str] = Field(None, description='Context label')
    contextTitle: Optional[str] = Field(None, description='Context title')


class Mfc1(BaseModel):
    alternateLink: Optional[str] = Field(
        None, description='Link to MusicFirst Classroom class'
    )
    id: Optional[str] = Field(
        None, description='Unique identifier of the course on MusicFirst Classroom'
    )


class MicrosoftGraph1(BaseModel):
    id: Optional[str] = Field(
        None, description='The course identifier on Microsoft Graph'
    )


class ClassRoles(Enum):
    teacher = 'teacher'
    student = 'student'


class ClassState(Enum):
    active = 'active'
    inactive = 'inactive'
    archived = 'archived'


class ClassUpdate(BaseModel):
    name: Optional[constr(max_length=255)] = Field(
        None, description='The name of the class'
    )
    section: Optional[constr(max_length=255)] = Field(
        None, description='The section of the class'
    )


class Capabilities(BaseModel):
    canAddScores: Optional[bool] = Field(
        None,
        description='Whether the current user can add scores to the collection\n\nIf this collection has the `type` `trash`, this property will be set to `false`. Use `DELETE /v2/scores/{score}` to trash a score.\n',
    )
    canDelete: Optional[bool] = Field(
        None, description='Whether the current user can delete the collection\n'
    )
    canDeleteScores: Optional[bool] = Field(
        None,
        description='Whether the current user can delete scores from the collection\n\nIf this collection has the `type` `trash`, this property will be set to `false`. Use `POST /v2/scores/{score}/untrash` to restore a score.\n',
    )
    canEdit: Optional[bool] = Field(
        None,
        description='Whether the current user can modify the metadata for the collection\n',
    )
    canShare: Optional[bool] = Field(
        None,
        description='Whether the current user can modify the sharing settings for the collection\n',
    )


class CollectionPrivacy(Enum):
    private = 'private'


class CollectionType(Enum):
    root = 'root'
    regular = 'regular'
    sharedWithMe = 'sharedWithMe'
    sharedWithGroup = 'sharedWithGroup'
    trash = 'trash'


class FlatErrorResponse(BaseModel):
    code: Optional[str] = Field(None, description='A corresponding code for this error')
    id: Optional[str] = Field(
        None, description='An unique error identifier generated for the request'
    )
    message: Optional[str] = Field(
        None, description='A printable message for this message'
    )
    param: Optional[str] = Field(
        None, description='The related parameter that caused the error'
    )


class FlatLocales(Enum):
    en = 'en'
    en_GB = 'en-GB'
    es = 'es'
    fr = 'fr'
    de = 'de'
    it = 'it'
    ja = 'ja'
    ko = 'ko'
    nl = 'nl'
    pl = 'pl'
    pt = 'pt'
    pt_BR = 'pt-BR'
    ro = 'ro'
    ru = 'ru'
    sv = 'sv'
    tr = 'tr'
    zh_Hans = 'zh-Hans'


class GoogleClassroomCoursework(BaseModel):
    alternateLink: Optional[str] = Field(
        None, description='Absolute link to this coursework in the Classroom web UI'
    )
    id: Optional[str] = Field(
        None, description='Identifier of the coursework assigned by Classroom'
    )
    state: Optional[str] = Field(None, description='State of the coursework')
    topicId: Optional[str] = Field(
        None, description='Identifier of the topic where the assignment is created'
    )


class GoogleClassroomSubmission(BaseModel):
    alternateLink: Optional[str] = Field(
        None, description='Absolute link to this coursework in the Classroom web UI'
    )
    id: Optional[str] = Field(
        None,
        description='Identifier of the coursework submission assigned by Classroom',
    )
    state: Optional[str] = Field(
        None, description='State of the submission on Google Classroom'
    )


class Type1(Enum):
    generic = 'generic'
    classTeachers = 'classTeachers'
    classStudents = 'classStudents'


class Group(BaseModel):
    creationDate: Optional[datetime] = Field(
        None, description='The creation date of the group'
    )
    id: Optional[str] = Field(None, description='The unique identifier of the group')
    name: Optional[str] = Field(None, description='The display name of the group')
    organization: Optional[str] = Field(
        None,
        description='If the group is related to an organization, this field will contain\nthe unique identifier of the organization\n',
    )
    readOnly: Optional[bool] = Field(
        None, description='`True` if the group is set in read-only\n'
    )
    type: Optional[Type1] = Field(
        None,
        description='The type of the group:\n* `generic`: A group created by a Flat user\n* `classTeachers`: A group created automaticaly by Flat that contains\n  the teachers of a class\n* `classStudents`: A group created automaticaly by Flat that contains\n  the studnets of a class\n',
    )
    usersCount: Optional[float] = Field(
        None, description='The number of users in this group'
    )


class GroupType(Enum):
    generic = 'generic'
    classTeachers = 'classTeachers'
    classStudents = 'classStudents'


class LicenseMode(Enum):
    credit = 'credit'
    site = 'site'


class LicenseSources(Enum):
    order = 'order'
    trial = 'trial'
    voucher = 'voucher'
    distributor = 'distributor'
    subscription = 'subscription'
    appStore = 'appStore'


class LmsName(Enum):
    canvas = 'canvas'
    moodle = 'moodle'
    schoology = 'schoology'
    blackboard = 'blackboard'
    desire2learn = 'desire2learn'
    sakai = 'sakai'
    schoolbox = 'schoolbox'
    other = 'other'


class LtiCredentials(BaseModel):
    consumerKey: Optional[str] = Field(None, description='OAuth 1 Consumer Key')
    consumerSecret: Optional[str] = Field(None, description='OAuth 1 Consumer Secret')
    creationDate: Optional[datetime] = Field(
        None, description='The creation date of thse credentials'
    )
    creator: Optional[str] = Field(
        None, description='Unique identifier of the user who created these credentials'
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of this couple of credentials'
    )
    lastUsage: Optional[datetime] = Field(
        None, description='The last time these credentials were used'
    )
    lms: Optional[LmsName] = None
    name: Optional[str] = Field(None, description='Name of the couple of credentials')
    organization: Optional[str] = Field(
        None,
        description='The unique identifier of the Organization associated to these credentials',
    )


class LtiCredentialsCreation(BaseModel):
    lms: LmsName
    name: constr(max_length=300) = Field(
        ..., description='Name of the couple of credentials'
    )


class Type2(Enum):
    rich = 'rich'
    photo = 'photo'
    video = 'video'
    link = 'link'
    flat = 'flat'
    googleDrive = 'googleDrive'
    worksheet = 'worksheet'
    performance = 'performance'


class MediaScoreSharingMode(Enum):
    read = 'read'
    write = 'write'
    copy = 'copy'
    performance = 'performance'


class MicrosoftGraphAssignment(BaseModel):
    alternateLink: Optional[str] = Field(
        None,
        description='Absolute link to this assignement in the Microsoft Teams web UI',
    )
    categories: Optional[List[str]] = Field(
        None, description='List of categories where this assignment is published under'
    )
    id: Optional[str] = Field(
        None, description='Identifier of the assignement assigned by Microsoft Teams'
    )
    state: Optional[str] = Field(None, description='State of the assignment')


class MicrosoftGraphSubmission(BaseModel):
    alternateLink: Optional[str] = Field(
        None,
        description='Absolute link to this submission in the Microsoft Teams web UI',
    )
    id: Optional[str] = Field(
        None, description='Identifier of the submission assigned by Microsoft Teams'
    )
    state: Optional[str] = Field(None, description='State of the submission')


class OrganizationRoles(Enum):
    admin = 'admin'
    billing = 'billing'
    teacher = 'teacher'
    user = 'user'


class ResourceCollaboratorCreation(BaseModel):
    aclAdmin: Optional[bool] = Field(
        False,
        description='`True` if the related user can can manage the current document, i.e. changing the document permissions and deleting the document\n',
    )
    aclRead: Optional[bool] = Field(
        True,
        description='`True` if the related user can read the score. (probably true if the user has a permission on the document).\n',
    )
    aclWrite: Optional[bool] = Field(
        False, description='`True` if the related user can modify the score.\n'
    )
    group: Optional[str] = Field(
        None, description='The unique identifier of a Flat group'
    )
    user: Optional[str] = Field(
        None, description='The unique identifier of a Flat user'
    )
    userEmail: Optional[str] = Field(
        None, description='Fill this field to invite an individual user by email.\n'
    )
    userToken: Optional[str] = Field(
        None, description='Token received in an invitation to join the score.\n'
    )


class ResourceRights(BaseModel):
    aclAdmin: Optional[bool] = Field(
        False,
        description='`True` if the current user can manage the current document (i.e. share, delete)\n\nIf this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection.\n',
    )
    aclRead: Optional[bool] = Field(
        False, description='`True` if the current user can read the current document\n'
    )
    aclWrite: Optional[bool] = Field(
        False,
        description='`True` if the current user can modify the current document.\n\nIf this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection.\n',
    )
    isCollaborator: Optional[bool] = Field(
        False,
        description='`True` if the current user is a collaborator of the current document (direct or via group).\n',
    )


class Type3(Enum):
    document = 'document'
    inline = 'inline'


class ScoreCommentContext(BaseModel):
    measureUuids: List[str] = Field(..., description='The list of measure UUIds')
    partUuid: str = Field(
        ..., description='The unique identifier (UUID) of the score part'
    )
    staffIdx: Optional[float] = Field(
        None, description='(Deprecated, use `staffUuid`) The identififer of the staff'
    )
    staffUuid: Optional[str] = Field(
        None, description='The unique identififer (UUID) of the staff'
    )
    startDpq: float
    startTimePos: float
    stopDpq: float
    stopTimePos: float


class ScoreCommentCreation(BaseModel):
    comment: str = Field(
        ...,
        description='The comment text that can includes mentions using the following format: `@[id:username]`.\n',
    )
    context: Optional[ScoreCommentContext] = None
    mentions: Optional[List[str]] = Field(
        None, description='The list of user identifiers mentioned in this comment'
    )
    rawComment: Optional[str] = Field(
        None,
        description='A raw version of the comment, that can be displayed without the mentions. If you use mentions, this property must be set.\n',
    )
    replyTo: Optional[str] = Field(
        None,
        description='When the comment is a reply to another comment, the unique identifier of the parent comment\n',
    )
    revision: Optional[str] = Field(
        None,
        description='The unique indentifier of the revision of the score where the comment was added. If this property is unspecified or contains "last", the API will automatically take the last revision created.\n',
    )


class ScoreCommentUpdate(BaseModel):
    comment: Optional[constr(min_length=1, max_length=10000)] = Field(
        None,
        description='The comment text that can includes mentions using the following format: `@[id:username]`.\n',
    )
    context: Optional[ScoreCommentContext] = None
    rawComment: Optional[constr(min_length=1, max_length=10000)] = Field(
        None,
        description='A raw version of the comment, that can be displayed without the mentions. If you use mentions, this property must be set.\n',
    )
    revision: Optional[str] = Field(
        None,
        description='The unique indentifier of the revision of the score where the comment was added. If this property is unspecified or contains "last", the API will automatically take the last revision created.\n',
    )


class ScoreCommentsCounts(BaseModel):
    monthly: Optional[float] = Field(
        None, description='The monthly unique number of comments added to the score'
    )
    total: Optional[float] = Field(
        None, description='The total number of comments added to the score'
    )
    unique: Optional[float] = Field(
        None, description='The unique (1/user) number of comments added to the score'
    )
    weekly: Optional[float] = Field(
        None, description='The weekly unique number of comments added to the score'
    )


class DataEncoding(Enum):
    base64 = 'base64'


class ScoreCreationType(Enum):
    original = 'original'
    arrangement = 'arrangement'
    other = 'other'


class ScoreFork(BaseModel):
    collection: Optional[str] = Field(
        'root',
        description='Unique identifier of a collection where the score will be copied.\nIf no collection identifier is provided, the score will be stored in the `root` directory.\n',
    )


class ScoreLicense(Enum):
    copyright = 'copyright'
    cc0 = 'cc0'
    cc_by = 'cc-by'
    cc_by_sa = 'cc-by-sa'
    cc_by_nd = 'cc-by-nd'
    cc_by_nc = 'cc-by-nc'
    cc_by_nc_sa = 'cc-by-nc-sa'
    cc_by_nc_nd = 'cc-by-nc-nd'


class ScoreLikesCounts(BaseModel):
    monthly: Optional[float] = Field(
        None, description='The number of new likes during the last month'
    )
    total: Optional[float] = Field(
        None, description='The total number of likes of the score'
    )
    weekly: Optional[float] = Field(
        None, description='The number of new likes during the last week'
    )


class ScorePlaysCounts(BaseModel):
    monthly: Optional[float] = Field(
        None, description='The monthly number of plays of the score'
    )
    total: Optional[float] = Field(
        None, description='The total number of plays of the score'
    )
    weekly: Optional[float] = Field(
        None, description='The weekly number of plays of the score'
    )


class ScorePrivacy(Enum):
    public = 'public'
    private = 'private'
    organizationPublic = 'organizationPublic'
    privateLink = 'privateLink'


class ScoreRevisionCreation(BaseModel):
    autosave: Optional[bool] = Field(
        None,
        description='Must be set to `true` if the revision was created automatically.\n',
    )
    data: str = Field(
        ...,
        description='The data of the score file. It must be a MusicXML 3 file (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI file (`audio/midi`) or a Flat.json (aka Adagio.json) file.\nBinary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be encoded in Base64, in this case the `dataEncoding` property must match the encoding used for the API request.\n',
        examples=['<score-partwise version="3.0"></score-partwise>'],
    )
    dataEncoding: Optional[DataEncoding] = Field(
        None,
        description='The optional encoding of the score data. This property must match the encoding used for the `data` property.',
    )
    description: Optional[str] = Field(
        None, description='A description associated to the revision'
    )


class ScoreRevisionStatistics(BaseModel):
    additions: Optional[float] = Field(
        None, description='The number of additions operations in the last revision'
    )
    deletions: Optional[float] = Field(
        None, description='The number of deletions operations in the last revision'
    )


class ScoreSource(BaseModel):
    googleDrive: Optional[str] = Field(
        None,
        description='If the score is a file on Google Drive, this field property must contain its identifier. To use this method, the Drive file must be public or the Flat Drive App must have access to the file.\n',
    )


class Type4(Enum):
    measure = 'measure'
    end = 'end'


class ScoreTrackPoint(BaseModel):
    measureUuid: Optional[UUID] = Field(
        None, description='The measure unique identifier'
    )
    time: float = Field(..., description='The corresponding time in seconds')
    type: Type4 = Field(
        ...,
        description='The type of the synchronization point. If the type is `measure`, the measure uuid must be present in `measureUuid`',
    )


class ScoreTrackState(Enum):
    draft = 'draft'
    completed = 'completed'
    deleted = 'deleted'


class ScoreTrackType(Enum):
    audio = 'audio'
    soundcloud = 'soundcloud'
    youtube = 'youtube'
    vimeo = 'vimeo'


class ScoreTrackUpdate(BaseModel):
    default: Optional[bool] = Field(
        None, description='True if the track should be used as default audio source'
    )
    state: Optional[ScoreTrackState] = 'draft'
    synchronizationPoints: Optional[List[ScoreTrackPoint]] = None
    title: Optional[str] = Field(None, description='Title of the track')


class ScoreViewsCounts(BaseModel):
    monthly: Optional[float] = Field(
        None, description='The monthly number of views of the score'
    )
    total: Optional[float] = Field(
        None, description='The total number of views of the score'
    )
    weekly: Optional[float] = Field(
        None, description='The weekly number of views of the score'
    )


class UserAdminUpdate(BaseModel):
    email: Optional[EmailStr] = Field(None, description='Email of the account')
    firstname: Optional[constr(max_length=60)] = Field(
        None, description='First name of the user'
    )
    lastname: Optional[constr(max_length=60)] = Field(
        None, description='Last name of the user'
    )
    organizationRole: Optional[OrganizationRoles] = None
    password: Optional[SecretStr] = Field(None, description='Password of the account')
    username: Optional[
        constr(pattern=r'^[A-Za-z0-9\-_.]+$', min_length=1, max_length=30)
    ] = Field(None, description='Username of the account')


class Type5(Enum):
    user = 'user'
    guest = 'guest'


class UserBasics(BaseModel):
    firstname: Optional[str] = Field(
        None, description='Firstname of the user (for education users)'
    )
    id: Optional[str] = Field(None, description='The user unique identifier')
    isFlatTeam: Optional[bool] = Field(
        None, description="Will be 'true' if user is part of the Flat Team"
    )
    isPowerUser: Optional[bool] = Field(
        None,
        description="User license status. 'true' if user is an individual Power user",
    )
    lastname: Optional[str] = Field(
        None, description='Lastname of the user (for education users)'
    )
    name: Optional[str] = Field(
        None, description='A displayable name for the user (for consumer users)'
    )
    picture: Optional[str] = Field(
        None, description='The URL of the picture to display'
    )
    printableName: Optional[str] = Field(
        None,
        description='The name that can be directly printed (name, firstname & lastname, or username)',
    )
    type: Optional[Type5] = Field(None, description='The type of user account')
    username: Optional[str] = Field(
        None, description='The user name (unique for the organization)'
    )


class UserCreation(BaseModel):
    email: Optional[EmailStr] = Field(None, description='Email of the new account')
    firstname: Optional[constr(max_length=60)] = Field(
        None, description='First name of the user'
    )
    lastname: Optional[constr(max_length=60)] = Field(
        None, description='Last name of the user'
    )
    locale: Optional[FlatLocales] = 'en'
    password: SecretStr = Field(..., description='Password of the new account')
    username: constr(pattern=r'^[A-Za-z0-9\-_.]+$', min_length=1, max_length=30) = (
        Field(..., description='Username of the new account')
    )


class License(BaseModel):
    active: Optional[bool] = Field(None, description='ID of the current license')
    expirationDate: Optional[datetime] = Field(
        None, description='Date when the license expires'
    )
    id: Optional[str] = Field(None, description='ID of the current license')
    mode: Optional[LicenseMode] = None
    source: Optional[LicenseSources] = 'order'


class UserPublicSummary(UserBasics):
    classRole: Optional[ClassRoles] = None
    htmlUrl: Optional[str] = Field(
        None, description='Link to user profile (for Indiv. users only)'
    )
    organization: Optional[str] = Field(
        None, description='Organization ID (for Edu users only)'
    )
    organizationRole: Optional[OrganizationRoles] = None


class State2(Enum):
    active = 'active'
    inactive = 'inactive'
    archived = 'archived'


class ClassesClassAssignmentsAssignmentSubmissionsSubmissionCommentsGetResponse(
    RootModel[List[AssignmentSubmissionComment]]
):
    root: List[AssignmentSubmissionComment]


class Sort(Enum):
    creationDate = 'creationDate'
    title = 'title'


class Direction(Enum):
    asc = 'asc'
    desc = 'desc'


class Sort2(Enum):
    creationDate = 'creationDate'
    modificationDate = 'modificationDate'
    title = 'title'


class Source(Enum):
    googleClassroom = 'googleClassroom'
    microsoftGraph = 'microsoftGraph'
    clever = 'clever'


class Role(Enum):
    user = 'user'
    teacher = 'teacher'
    admin = 'admin'


class OrganizationsLtiCredentialsGetResponse(RootModel[List[LtiCredentials]]):
    root: List[LtiCredentials]


class SortEnum(Enum):
    firstname = 'firstname'
    lastname = 'lastname'
    lastActivityDate = 'lastActivityDate'
    licenseExpirationDate = 'licenseExpirationDate'


class RoleEnum(Enum):
    user = 'user'
    teacher = 'teacher'
    admin = 'admin'


class Sort4(RootModel[List[SortEnum]]):
    root: List[SortEnum]


class Role2(RootModel[List[RoleEnum]]):
    root: List[RoleEnum]


class Group1(RootModel[List[str]]):
    root: List[str]


class LicenseExpirationDate(RootModel[List[str]]):
    root: List[str]


class Role3(RootModel[List[RoleEnum]]):
    root: List[RoleEnum]


class Type7(Enum):
    document = 'document'
    inline = 'inline'


class Sort5(Enum):
    date = 'date'


class Format(Enum):
    json = 'json'
    mxl = 'mxl'
    xml = 'xml'
    mp3 = 'mp3'
    wav = 'wav'
    midi = 'midi'
    thumbnail_png = 'thumbnail.png'
    synchronizationPoints = 'synchronizationPoints'


class AssignmentSubmissionHistory(BaseModel):
    attachment: Optional[Attachment] = None
    date: Optional[datetime] = Field(
        None, description='The date when the submission was changed'
    )
    draftGrade: Optional[float] = Field(
        None,
        description='The numerator of the grade at this time in the submission grade history',
    )
    grade: Optional[float] = Field(
        None,
        description='The numerator of the grade at this time in the submission grade history',
    )
    maxPoints: Optional[float] = Field(
        None,
        description='The denominator of the grade at this time in the submission grade history',
    )
    state: Optional[AssignmentSubmissionState] = None
    users: Optional[List[str]] = Field(
        None, description='The user(s) unique identifier(s) who made the change'
    )


class ClassAttachmentCreation(BaseModel):
    googleDriveFileId: Optional[str] = Field(
        None, description='The ID of the Google Drive File'
    )
    lockScoreTemplate: Optional[bool] = Field(
        None,
        description="To be used with a score attached in `sharingMode` `copy` (score used as template). If true, students won't be able to change the original notes of the template.",
    )
    score: Optional[str] = Field(
        None,
        description='A unique Flat score identifier. The user creating the assignment must at least have read access to the document. If the user has admin rights, new group permissions will be automatically added for the\nteachers and students of the class.\n',
    )
    sharingMode: Optional[MediaScoreSharingMode] = 'read'
    type: Optional[Type] = Field(None, description='The type of the attachment posted')
    url: Optional[str] = Field(None, description='The URL of the attachment.')
    worksheet: Optional[str] = Field(None, description='An unique worksheet identifier')


class CollectionCreation(BaseModel):
    privacy: CollectionPrivacy
    title: constr(min_length=1, max_length=300) = Field(
        ..., description='The title of the collection'
    )


class CollectionModification(BaseModel):
    privacy: Optional[CollectionPrivacy] = None
    title: Optional[constr(min_length=1, max_length=300)] = Field(
        None, description='The title of the collection'
    )


class GroupDetails(BaseModel):
    creationDate: Optional[datetime] = Field(
        None, description='The date when the group was create'
    )
    id: Optional[str] = Field(None, description='The unique identifier of the group')
    name: Optional[str] = Field(None, description='The displayable name of the group')
    organization: Optional[str] = Field(
        None, description='The unique identifier of the Organization owning the group'
    )
    readOnly: Optional[bool] = Field(
        None,
        description='`true` if the properties and members of this group are in in read-only\n',
    )
    type: Optional[GroupType] = None
    usersCount: Optional[float] = Field(
        None, description='The number of students in this group'
    )


class MediaAttachment(BaseModel):
    authorName: Optional[str] = Field(
        None, description='The resolved author name of the attachment'
    )
    authorUrl: Optional[str] = Field(
        None, description='The resolved author url of the attachment'
    )
    description: Optional[str] = Field(
        None, description='The resolved description of the attachment'
    )
    googleDriveFileId: Optional[str] = Field(
        None, description='The ID of the Google Drive File'
    )
    html: Optional[str] = Field(
        None,
        description='If the attachment type is `rich` or `video`, the HTML code of the\nmedia to display\n',
    )
    htmlHeight: Optional[str] = Field(
        None, description='If the `html` is available, the height of the widget'
    )
    htmlWidth: Optional[str] = Field(
        None, description='If the `html` is available, the width of the widget'
    )
    iconUrl: Optional[str] = Field(None, description='The URL of the icon')
    lockScoreTemplate: Optional[bool] = Field(
        None,
        description="To be used with a score attached in `sharingMode` `copy` (score used as template). If true, students won't be able to change the original notes of the template.",
    )
    mimeType: Optional[str] = Field(None, description='The mine type of the file')
    revision: Optional[str] = Field(
        None, description='An unique revision identifier of a score'
    )
    score: Optional[str] = Field(None, description='An unique Flat score identifier')
    sharingMode: Optional[MediaScoreSharingMode] = 'read'
    thumbnailHeight: Optional[int] = Field(
        None,
        description='If the `thumbnailUrl` is available, the width of the thumbnail\n',
    )
    thumbnailUrl: Optional[str] = Field(
        None,
        description='If the attachment type is `rich`, `video`, `photo` or `link`, a\ndisplayable thumbnail for this attachment\n',
    )
    thumbnailWidth: Optional[int] = Field(
        None,
        description='If the `thumbnailUrl` is available, the width of the thumbnail\n',
    )
    title: Optional[str] = Field(
        None, description='The resolved title of the attachment'
    )
    track: Optional[str] = Field(None, description='A unique track identifier')
    type: Optional[Type2] = Field(
        None,
        description='The type of the assignment resolved:\n* `rich`, `photo`, `video` are attachment types that are automatically resolved from a `link` attachment.\n* A `flat` attachment is a score document where the unique identifier will be specified in the `score` property. Its sharing mode will be provided in the `sharingMode` property.\n',
    )
    url: Optional[str] = Field(None, description='The url of the attachment')
    worksheet: Optional[str] = Field(None, description='An unique worksheet identifier')


class OrganizationInvitation(BaseModel):
    customCode: Optional[str] = Field(
        None, description='Enrollment code to use when joining this organization'
    )
    email: Optional[str] = Field(
        None, description='The email address this invitation was sent to'
    )
    id: Optional[str] = Field(None, description='The invitation unique identifier')
    invitedBy: Optional[str] = Field(
        None,
        description='The unique identifier of the User who created this invitation',
    )
    organization: Optional[str] = Field(
        None, description='The unique identifier of the Organization owning this class'
    )
    organizationRole: Optional[OrganizationRoles] = None
    usedBy: Optional[str] = Field(
        None, description='The unique identifier of the User who used this invitation'
    )


class OrganizationInvitationCreation(BaseModel):
    email: Optional[str] = Field(
        None, description='The email address you want to send the invitation to'
    )
    organizationRole: Optional[OrganizationRoles] = None


class ScoreComment(BaseModel):
    comment: Optional[str] = Field(
        None,
        description='The comment text that can includes mentions using the following\nformat: `@[id:username]`.\n',
    )
    context: Optional[ScoreCommentContext] = None
    date: Optional[datetime] = Field(
        None, description='The date when the comment was posted'
    )
    id: Optional[str] = Field(None, description='The comment unique identifier')
    mentions: Optional[List[str]] = Field(
        None, description='The list of user identifier mentioned on the score'
    )
    modificationDate: Optional[datetime] = Field(
        None, description='The date of the last comment modification'
    )
    rawComment: Optional[str] = Field(
        None,
        description='A raw version of the comment, that can be displayed without parsing\nthe mentions.\n',
    )
    replyTo: Optional[str] = Field(
        None,
        description='When the comment is a reply to another comment, the unique identifier of the parent comment\n',
    )
    resolved: Optional[bool] = Field(
        None,
        description='For inline comments, the comment can be marked as resolved and will be hidden in the future responses\n',
    )
    resolvedBy: Optional[str] = Field(
        None,
        description='If the user is marked as resolved, this will contain the unique identifier of the User who marked this comment as resolved\n',
    )
    revision: Optional[str] = Field(
        None, description='The unique identifier of revision the comment was posted'
    )
    score: Optional[str] = Field(
        None,
        description='The unique identifier of the score where the comment was posted',
    )
    spam: Optional[bool] = Field(
        None,
        description='`true  if the message has been detected as spam and hidden from other users\n',
    )
    type: Optional[Type3] = Field(None, description='The type of the comment')
    user: Optional[str] = Field(None, description='The author unique identifier')


class ScoreCreation(BaseModel):
    collection: Optional[str] = Field(
        None,
        description='Unique identifier of a collection where the score will be created.\nIf no collection identifier is provided, the score will be stored in the `root` directory.\n',
    )
    data: Optional[str] = Field(
        None,
        description='The data of the score file. It must be a MusicXML 3 file (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI file (`audio/midi`) or a Flat.json (aka Adagio.json) file.\nBinary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be encoded in Base64, in this case the `dataEncoding` property must match the encoding used for the API request.\n',
        examples=['<score-partwise version="3.0"></score-partwise>'],
    )
    dataEncoding: Optional[DataEncoding] = Field(
        None,
        description='The optional encoding of the score data. This property must match the encoding used for the `data` property.',
    )
    filename: Optional[str] = Field(
        None, description='If this is an imported file, its filename'
    )
    googleDriveFolder: Optional[str] = Field(
        None,
        description='If the user uses Google Drive and this properties is specified, the file will be created in this directory. The currently user creating the file must be granted to write in this directory.\n',
    )
    privacy: ScorePrivacy
    source: Optional[ScoreSource] = None
    title: Optional[str] = Field(
        None,
        description='The title of the new score. If the title is too long, the API may trim this one.\n\nIf this title is not specified, the API will try to (in this order):\n  - Use the title contained in the file (e.g. [`movement-title`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-movement-title.htm) or [`credit-words`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-credit-words.htm) for [MusicXML](http://www.musicxml.com/) files).\n  - Use the name of the file for files from a specified `source` (e.g. Google Drive) or the one in the `filename` property\n  - Set a default title (e.g. "New Music Score")\n',
    )


class ScoreModification(BaseModel):
    arranger: Optional[str] = Field(None, description='The arranger of the score')
    composer: Optional[str] = Field(None, description='The composer of the score')
    creationType: Optional[ScoreCreationType] = None
    description: Optional[constr(max_length=2000)] = Field(
        None, description='Description of the creation'
    )
    license: Optional[ScoreLicense] = None
    licenseText: Optional[str] = Field(
        None, description='The rights info written on the score'
    )
    lyricist: Optional[str] = Field(None, description='The lyricist of the score')
    privacy: Optional[ScorePrivacy] = None
    sharingKey: Optional[constr(pattern=r'^[a-f0-9]{128}$')] = Field(
        None,
        description='When using the `privacy` mode `privateLink`, this property can be used to set a custom sharing key, otherwise a new key will be generated.',
    )
    subtitle: Optional[str] = Field(None, description='The subtitle of the score')
    tags: Optional[List[str]] = Field(None, description='Tags describing the score')
    title: Optional[str] = Field(None, description='The title of the score')


class ScoreRevision(BaseModel):
    autosave: Optional[bool] = Field(
        None,
        description='True if this revision was automatically generated by Flat and not on\npurpose by the user.\n',
    )
    collaborators: Optional[List[str]] = None
    creationDate: Optional[datetime] = Field(
        None, description='The date when this revision was created'
    )
    description: Optional[str] = Field(
        None, description='A description associated to the revision'
    )
    event: Optional[str] = Field(
        None, description='The last event (action id) of the revision'
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of the revision.'
    )
    statistics: Optional[ScoreRevisionStatistics] = None
    user: Optional[str] = Field(
        None, description='The user identifier who created the revision'
    )


class ScoreSummary(BaseModel):
    htmlUrl: Optional[str] = Field(
        None, description='The url where the score can be viewed in a web browser'
    )
    id: Optional[str] = Field(None, description='The unique identifier of the score')
    privacy: Optional[ScorePrivacy] = None
    sharingKey: Optional[str] = Field(
        None,
        description='The private sharing key of the score (available when the `privacy` mode is set to `privateLink`)',
    )
    title: Optional[str] = Field(None, description='The title of the score')
    user: Optional[UserPublicSummary] = None


class ScoreTrack(BaseModel):
    creationDate: Optional[datetime] = Field(
        None, description='The creation date of the track'
    )
    creator: Optional[str] = Field(
        None, description='The unique identifier of the track creator'
    )
    default: Optional[bool] = Field(
        None, description='True if the track should be used as default audio source'
    )
    id: Optional[str] = Field(
        None, description='The unique identifier of the score track'
    )
    mediaId: Optional[str] = Field(
        None,
        description='The unique identifier of the track when hosted on an external service.\nFor example, if the url is `https://www.youtube.com/watch?v=dQw4w9WgXcQ`, `mediaId` will be `dQw4w9WgXcQ`\n',
    )
    modificationDate: Optional[datetime] = Field(
        None, description='The modification date of the track'
    )
    score: Optional[str] = Field(None, description='The unique identifier of the score')
    state: Optional[ScoreTrackState] = 'draft'
    synchronizationPoints: Optional[List[ScoreTrackPoint]] = None
    title: Optional[str] = Field(None, description='Title of the track')
    type: Optional[ScoreTrackType] = None
    url: Optional[str] = Field(None, description='The URL of the track')


class ScoreTrackCreation(BaseModel):
    default: Optional[bool] = Field(
        None, description='True if the track should be used as default audio source'
    )
    state: Optional[ScoreTrackState] = 'draft'
    synchronizationPoints: Optional[List[ScoreTrackPoint]] = None
    title: Optional[str] = Field(None, description='Title of the track')
    url: Optional[str] = Field(None, description='The URL of the track')


class UserDetailsAdmin(UserPublicSummary):
    email: Optional[EmailStr] = Field(None, description='Email of the user')
    lastActivityDate: Optional[datetime] = Field(
        None, description='Date of the last user activity'
    )
    license: Optional[License] = Field(
        None, description='Current active license of the user'
    )


class UserPublic(UserPublicSummary):
    bio: Optional[str] = Field(None, description="User's biography")
    coverPicture: Optional[str] = Field(
        None, description='Cover picture (backgroud) for the profile'
    )
    followersCount: Optional[int] = Field(
        None, description='Number of followers the user have'
    )
    followingCount: Optional[int] = Field(
        None, description='Number of people the user follow'
    )
    instruments: Optional[List[str]] = Field(
        None,
        description='An array of the instrument identifiers.\nThe format of the strings is `{instrument-group}.{instrument-id}`.\n',
    )
    likedScoresCount: Optional[int] = Field(
        None, description='Number of the scores liked by the user'
    )
    ownedPublicScoresCount: Optional[int] = Field(
        None, description='Number of public scores the user have'
    )
    profileTheme: Optional[str] = Field(
        None, description='Theme (background) for the profile'
    )
    registrationDate: Optional[datetime] = Field(
        None, description='Date the user signed up'
    )


class ClassesClassAssignmentsAssignmentSubmissionsSubmissionHistoryGetResponse(
    RootModel[List[AssignmentSubmissionHistory]]
):
    root: List[AssignmentSubmissionHistory]


class GroupsGroupUsersGetResponse(RootModel[List[UserPublic]]):
    root: List[UserPublic]


class OrganizationsInvitationsGetResponse(RootModel[List[OrganizationInvitation]]):
    root: List[OrganizationInvitation]


class OrganizationsUsersGetResponse(RootModel[List[UserDetailsAdmin]]):
    root: List[UserDetailsAdmin]


class OrganizationsUsersCountGetResponse(RootModel[List[UserDetailsAdmin]]):
    root: List[UserDetailsAdmin]


class ScoresScoreCommentsGetResponse(RootModel[List[ScoreComment]]):
    root: List[ScoreComment]


class ScoresScoreRevisionsGetResponse(RootModel[List[ScoreRevision]]):
    root: List[ScoreRevision]


class ScoresScoreTracksGetResponse(RootModel[List[ScoreTrack]]):
    root: List[ScoreTrack]


class AssignmentCreation(BaseModel):
    assignedStudents: Optional[List[str]] = Field(
        None,
        description='Identifiers for the students that have access to the assignment',
    )
    assigneeMode: Optional[AssigneeMode] = Field(
        None, description='Possible modes of assigning assignments'
    )
    attachments: Optional[List[ClassAttachmentCreation]] = None
    cover: Optional[str] = Field(None, description='The URL of the cover to display')
    coverFile: Optional[str] = Field(None, description='The id of the cover to display')
    description: Optional[str] = Field(
        None, description='Description and content of the assignment'
    )
    dueDate: Optional[datetime] = Field(
        None,
        description="The due date of this assignment, late submissions will be marked as paste due. If not set, the assignment won't have a due date.\n",
    )
    googleClassroom: Optional[GoogleClassroom] = Field(
        None, description='Google Classroom options for this assignment'
    )
    maxPoints: Optional[confloat(ge=0.0, le=100.0)] = Field(
        None,
        description='If set, the grading will be enabled for the assignement with this value as the maximum of points\n',
    )
    microsoftGraph: Optional[MicrosoftGraph] = Field(
        None, description='Microsoft Graph options for this assignment'
    )
    nbPlaybackAuthorized: Optional[float] = Field(
        None,
        description='The number of playback authorized on the scores of the assignment.',
    )
    scheduledDate: Optional[datetime] = Field(
        None,
        description='The publication (scheduled) date of the assignment.\nIf this one is specified, the assignment will only be listed to the teachers of the class.\n',
    )
    state: Optional[State1] = Field(None, description='State of the assignment')
    title: Optional[str] = Field(None, description='Title of the assignment')
    toolset: Optional[str] = Field(None, description='The id of the associated toolset')
    type: Optional[AssignmentType] = None


class AssignmentSubmission(BaseModel):
    assignment: Optional[str] = Field(
        None, description='Unique identifier of the assignment'
    )
    attachments: Optional[List[MediaAttachment]] = None
    classroom: Optional[str] = Field(
        None,
        description='Unique identifier of the classroom where the assignment was posted\n',
    )
    creationDate: Optional[str] = Field(
        None, description='The date when the submission was created'
    )
    creator: Optional[str] = Field(
        None,
        description='The User identifier of the student who created the submission',
    )
    draftGrade: Optional[float] = Field(
        None,
        description='Optional grade. If unset, no grade was set. This value is only visible by the teacher, and we will be set to `grade` once the teacher returns the submission',
    )
    googleClassroom: Optional[GoogleClassroomSubmission] = None
    grade: Optional[float] = Field(
        None, description='Optional grade. If unset, no grade was set.'
    )
    id: Optional[str] = Field(None, description='Unique identifier of the submission')
    maxPoints: Optional[float] = Field(
        None,
        description='Optional max points for the grade. If set, a corresponding `draftGrade` or `grade` will be set.',
    )
    microsoftGraph: Optional[MicrosoftGraphSubmission] = None
    returnCreator: Optional[str] = Field(
        None,
        description='The User unique identifier of the teacher who returned the submission\n',
    )
    returnDate: Optional[str] = Field(
        None, description='The date when the teacher returned the work'
    )
    state: Optional[AssignmentSubmissionState] = None
    submissionDate: Optional[str] = Field(
        None, description='The date when the student submitted his work'
    )


class AssignmentSubmissionUpdate(BaseModel):
    attachments: Optional[List[ClassAttachmentCreation]] = None
    comments: Optional[Comments] = None
    draftGrade: Optional[confloat(ge=0.0, le=100.0)] = Field(
        None,
        description='Optional grade. If unset, no grade was set. This value is only visible by the teacher, and we will be set to `grade` once the teacher returns the submission',
    )
    grade: Optional[confloat(ge=0.0, le=100.0)] = Field(
        None, description='Optional grade. If unset, no grade was set.'
    )
    return_: Optional[bool] = Field(
        None,
        alias='return',
        description='If `true`, the submission will be marked as done',
    )
    submit: Optional[bool] = Field(
        None, description='If `true`, the submission will be marked as done'
    )


class ClassDetails(BaseModel):
    assignmentsCount: Optional[float] = Field(
        None, description='The number of assignments created in the class'
    )
    canvas: Optional[Canvas1] = Field(
        None, description='Meta information provided by Canvs LMS'
    )
    clever: Optional[Clever] = Field(
        None, description='Clever.com section-related information'
    )
    creationDate: Optional[datetime] = Field(
        None, description='The date when the class was create'
    )
    description: Optional[str] = Field(
        None, description='An optionnal description for this class'
    )
    enrollmentCode: Optional[str] = Field(
        None,
        description='[Teachers only] The enrollment code that can be used by the students to join the class\n',
    )
    googleClassroom: Optional[GoogleClassroom1] = Field(
        None, description='Google Classroom course-related information'
    )
    googleDrive: Optional[GoogleDrive] = Field(
        None,
        description='Google Drive course-related information provided by Google Classroom',
    )
    id: Optional[str] = Field(None, description='The unique identifier of the class')
    issues: Optional[Issues] = Field(None, description='Detected issues for this class')
    lti: Optional[Lti1] = Field(
        None, description='Meta information provided by the LTI consumer'
    )
    mfc: Optional[Mfc1] = Field(
        None, description='Meta information provided by Canvs LMS'
    )
    microsoftGraph: Optional[MicrosoftGraph1] = None
    name: Optional[str] = Field(None, description='The name of the class')
    organization: Optional[str] = Field(
        None, description='The unique identifier of the Organization owning this class'
    )
    owner: Optional[str] = Field(
        None, description='The unique identifier of the User owning this class'
    )
    section: Optional[str] = Field(None, description='The section of the class')
    state: Optional[ClassState] = None
    studentsGroup: Optional[GroupDetails] = None
    teachersGroup: Optional[GroupDetails] = None
    theme: Optional[str] = Field(
        None, description='The theme identifier using in Flat User Interface'
    )


class ResourceCollaborator(ResourceRights):
    collection: Optional[str] = Field(
        None,
        description='If this object is a permission of a collection, this property will contain the unique identifier of the collection',
    )
    group: Optional[Group] = None
    id: Optional[str] = Field(
        None, description='The unique identifier of the permission'
    )
    invited: Optional[bool] = Field(
        None,
        description='If this property is `true`, this is still a pending invitation\n',
    )
    score: Optional[str] = Field(
        None,
        description='If this object is a permission of a score, this property will contain the unique identifier of the score',
    )
    user: Optional[UserPublic] = None
    userEmail: Optional[str] = Field(
        None,
        description='If the collaborator is not a user of Flat yet, this field will contain his email.\n',
    )


class ScoreDetails(ScoreSummary):
    arranger: Optional[str] = Field(None, description='Arranger of the score')
    collaborators: Optional[List[ResourceCollaborator]] = Field(
        None, description='The list of the collaborators of the score'
    )
    collections: Optional[List[str]] = Field(
        None,
        description='The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.',
    )
    comments: Optional[ScoreCommentsCounts] = None
    composer: Optional[str] = Field(None, description='Composer of the score')
    creationDate: Optional[datetime] = Field(
        None, description='The date when the score was created'
    )
    creationType: Optional[ScoreCreationType] = None
    description: Optional[str] = Field(None, description='Description of the creation')
    durationTime: Optional[float] = Field(
        None, description='In seconds, an approximative duration of the score'
    )
    googleDriveFileId: Optional[str] = Field(
        None,
        description='If the user uses Google Drive and the score exists on Google Drive, this field will contain the unique identifier of the Flat score on Google Drive. You can access the document using the url: `https://drive.google.com/open?id={googleDriveFileId}`\n',
    )
    instruments: Optional[List[str]] = Field(
        None,
        description="An array of the instrument identifiers used in the last version of the score. This is mainly used to display a list of the instruments in the Flat's UI or instruments icons. The format of the strings is `{instrument-group}.{instrument-id}`.\n",
    )
    license: Optional[ScoreLicense] = None
    licenseText: Optional[str] = Field(
        None,
        description='Additional license text written on the exported/printed score',
    )
    likes: Optional[ScoreLikesCounts] = None
    lyricist: Optional[str] = Field(None, description='Lyricist of the score')
    mainTempoQpm: Optional[float] = Field(
        None, description='The main tempo of the score (in QPM)'
    )
    modificationDate: Optional[datetime] = Field(
        None, description='The date of the last revision of the score'
    )
    numberMeasures: Optional[int] = Field(
        None, description='The number of measures in the score'
    )
    organization: Optional[str] = Field(
        None,
        description='If the score has been created in an organization, the identifier of this organization. This property is especially used with the score privacy `organizationPublic`.\n',
    )
    parentScore: Optional[str] = Field(
        None,
        description='If the score has been forked, the unique identifier of the parent score.\n',
    )
    plays: Optional[ScorePlaysCounts] = None
    publicationDate: Optional[datetime] = Field(
        None, description='The date when the score was published on Flat'
    )
    rights: Optional[ResourceRights] = None
    samples: Optional[List[str]] = Field(
        None,
        description='An array of the audio samples identifiers used the different score parts.\nThe format of the strings is `{instrument-group}.{sample-id}`.\n',
    )
    subtitle: Optional[str] = Field(None, description='Subtitle of the score')
    tags: Optional[List[constr(pattern=r'^[a-zA-Z0-9]{1,30}$')]] = Field(
        None, description='Tags describing the score'
    )
    views: Optional[ScoreViewsCounts] = None


class UserDetails(UserPublic):
    coverPictureFile: Optional[str] = Field(
        None, description='The ID of the user profile cover picture'
    )
    id: Optional[str] = Field(None, description='Identifier of the user')
    locale: Optional[FlatLocales] = 'en'
    pictureFile: Optional[str] = Field(
        None, description='The ID of the user profile picture'
    )
    privateProfile: Optional[bool] = Field(
        None,
        description='Tell either this user profile is private or not (individual accounts only)',
    )
    type: Optional[Type5] = Field(None, description='The type of account')


class ClassesGetResponse(RootModel[List[ClassDetails]]):
    root: List[ClassDetails]


class ClassesClassAssignmentsAssignmentSubmissionsGetResponse(
    RootModel[List[AssignmentSubmission]]
):
    root: List[AssignmentSubmission]


class ClassesClassStudentsUserSubmissionsGetResponse(
    RootModel[List[AssignmentSubmission]]
):
    root: List[AssignmentSubmission]


class CollectionsCollectionScoresGetResponse(RootModel[List[ScoreDetails]]):
    root: List[ScoreDetails]


class GroupsGroupScoresGetResponse(RootModel[List[ScoreDetails]]):
    root: List[ScoreDetails]


class ScoresScoreCollaboratorsGetResponse(RootModel[List[ResourceCollaborator]]):
    root: List[ResourceCollaborator]


class ScoresScoreSubmissionsGetResponse(RootModel[List[AssignmentSubmission]]):
    root: List[AssignmentSubmission]


class UsersUserLikesGetResponse(RootModel[List[ScoreDetails]]):
    root: List[ScoreDetails]


class UsersUserScoresGetResponse(RootModel[List[ScoreDetails]]):
    root: List[ScoreDetails]


class Assignment(BaseModel):
    attachments: Optional[List[MediaAttachment]] = None
    canvas: Optional[Canvas] = Field(None, description='A Canvas LMS assignment')
    classroom: Optional[str] = Field(
        None,
        description='The unique identifier of the class where this assignment was posted',
    )
    cover: Optional[str] = Field(None, description='The URL of the cover to display')
    coverFile: Optional[str] = Field(None, description='The id of the cover to display')
    creationDate: Optional[datetime] = Field(
        None, description='The creation date of this assignment'
    )
    creator: Optional[str] = Field(
        None,
        description='The User unique identifier of the creator of this assignment\n',
    )
    description: Optional[str] = Field(
        None, description='Description and content of the assignment'
    )
    dueDate: Optional[datetime] = Field(
        None,
        description='The due date of this assignment, late submissions will be marked as\npaste due.\n',
    )
    googleClassroom: Optional[GoogleClassroomCoursework] = None
    lti: Optional[Lti] = Field(None, description='An LTI assignment')
    maxPoints: Optional[float] = Field(
        None, description='If set, the grading will be enabled for the assignement\n'
    )
    mfc: Optional[Mfc] = Field(None, description='A MusicFirst Classroom assignment')
    microsoftGraph: Optional[MicrosoftGraphAssignment] = None
    scheduledDate: Optional[datetime] = Field(
        None,
        description='The publication (scheduled) date of the assignment.\nIf this one is specified, the assignment will only be listed to the teachers of the class.\n',
    )
    state: Optional[State] = Field(None, description='State of the assignment')
    submissions: Optional[List[AssignmentSubmission]] = None
    title: Optional[str] = Field(None, description='Title of the assignment')
    type: Optional[AssignmentType] = None


class Collection(BaseModel):
    app: Optional[str] = Field(
        None,
        description='If this directory is dedicated to an app, the unique idenfier of this app',
    )
    capabilities: Optional[Capabilities] = Field(
        None,
        description='Capabilities the current user has on this collection. Each capability corresponds to a fine-grained action that a user may take.',
    )
    collaborators: Optional[List[ResourceCollaborator]] = Field(
        None, description='The list of the collaborators of the collection'
    )
    collections: Optional[List[str]] = Field(
        None,
        description='The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.',
    )
    creationDate: Optional[datetime] = Field(
        None, description='The date when the collection was created'
    )
    htmlUrl: Optional[str] = Field(
        None, description='The url where the collection can be viewed in a web browser'
    )
    id: Optional[str] = Field(None, description='Unique identifier of the collection')
    privacy: Optional[CollectionPrivacy] = None
    rights: Optional[ResourceRights] = None
    sharingKey: Optional[str] = Field(
        None,
        description='The private sharing key of the collection (available when the `privacy` mode is set to `privateLink`)',
    )
    title: Optional[str] = Field(None, description='The title of the collection')
    type: Optional[CollectionType] = None
    user: Optional[UserPublicSummary] = None


class ClassesClassAssignmentsGetResponse(RootModel[List[Assignment]]):
    root: List[Assignment]


class CollectionsGetResponse(RootModel[List[Collection]]):
    root: List[Collection]
